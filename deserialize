#include <vector>
#include <iostream>
#include <limits>

using namespace std;

class Serialized
{
protected:
	string serialized;

	const char outerDelimiter = '~';
	const char innerDelimiter = '|';
	const string delims = "~|";

	void deepClean();

	vector<vector<string>*> outerVector;

public:
	Serialized();
	~Serialized();

	void setSerialized(string);
	string getSerialized();

	virtual void serialize();
	virtual void deserialize();
	virtual void deserialize(string);

	virtual void print() = 0;
};

Serialized::Serialized()
{

}

Serialized::~Serialized()
{

}

void Serialized::setSerialized(string _serialized)
{
	serialized = _serialized;
}

string Serialized::getSerialized()
{
	return serialized;
}

void Serialized::serialize()
{
	vector<string>::iterator innerIterator;
	vector<vector<string>*>::iterator outerIterator;

	for (outerIterator = outerVector.begin(); outerIterator != outerVector.end(); ++outerIterator)
	{
		for (innerIterator = (*outerIterator)->begin(); innerIterator != (*outerIterator)->end(); ++innerIterator)
		{
			serialized += *innerIterator + innerDelimiter;
		}
		serialized += outerDelimiter;
	}
}

void Serialized::deserialize()
{
	if (serialized.empty()) {}
	else 
	{
		vector<string>::iterator innerIterator;
		vector<vector<string>*>::iterator outerIterator;

		outerIterator = outerVector.begin();
		innerIterator = (*outerIterator)->begin();

		//Make sure the container is empty
		deepClean();

		//Make a string of delimiters for searching purposes
		string delims;
		delims.push_back(outerDelimiter);
		delims.push_back(innerDelimiter);

		//Location placeholders
		size_t stringStart = 0;
		size_t stringEnd = serialized.find_first_of(outerDelimiter, stringStart);

		size_t subStringStart = 0;
		size_t subStringEnd = serialized.find_first_of(innerDelimiter, subStringStart);
		
		size_t firstChar;
		size_t subStringLength;

		while (stringEnd != string::npos)
		{
			while (subStringEnd != string::npos && (subStringEnd < stringEnd))
			{
				firstChar = serialized.find_first_not_of(delims, subStringStart);
				subStringLength = subStringEnd - firstChar;

				//Add the element to the current inner vector
				(*outerIterator)->push_back(serialized.substr(firstChar, subStringLength));
				subStringStart = subStringEnd + 1;

				//Check for additional subString delimiter
				subStringEnd = serialized.find_first_of(innerDelimiter, subStringStart);
			}
			//Advance to the next outer string delimiter and inner vector
			stringStart = stringEnd + 1;
			if (outerIterator != outerVector.end())
				outerIterator++;

		//Check for outer string delimiter
		stringEnd = serialized.find_first_of(outerDelimiter, stringStart);
		}
	}
}

void Serialized::deserialize(string _serialized)
{
	setSerialized(_serialized);
	deserialize();
}

void Serialized::deepClean()
{
	vector<string>::iterator innerIterator;
	vector<vector<string>*>::iterator outerIterator;

	//Clear all inner vectors, leaving data structure
	for (outerIterator = outerVector.begin(); outerIterator != outerVector.end(); outerIterator++)
	{
		(*outerIterator)->clear();
	}

	outerVector.clear();
}
